-- HalloWorld

import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';

class App extends Component {
  render() {
    
    const name = 'Larry';
    const showHalloWorld = true;
    const showMath = true;
    const num1 = 40;
    const num2 = 23;

    let math;
    if(showMath) {
      math = <h4>{num1} + {num2} = {num1 + num2}</h4>;
    } else {
      math = null;
    }

    return (
      <div className="App">
        <h1>The App Component</h1>
        <h4>Hallo { name.toLocaleUpperCase() }</h4>
        <h4>1 + 1 = {1 + 1}</h4> {/* any js statement */}
        <h4>{ showHalloWorld ? <h4>Hallo World</h4> : null }</h4>
        {math}
      </div>
    );
  }
}

export default App;


-- clicks_and_conditionalrendering

import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';

class App extends Component {

  state = {
    x: 0,
    page: 'start' // task
  }

  incrementX = () => {
    // this.x++;
    this.setState({
      x: this.state.x + 1
    });
  }

  setXTo = (newX) => {
    this.setState({
      x: newX
    });
  }

  // task
  showPage = (page) => {
    this.setState({
      page: page
    });
  }

  render() {
    
    return (
      <div className="App">
        <h1>Conditional Rendering</h1>
        <button onClick={ this.incrementX }>Increment x</button>
        <button onClick={ this.setXTo.bind(this, 3) }>Set x to 3</button>
        <h2>{this.state.x}</h2>
        <h2>{this.state.x > 5 ? 'x is greater than 5' : 'x less or equal than 5' }</h2>
        { /* task 
            1. Create a navigation div with 3 links: Startpage, Products and About 
            2. When the user clicks on any of them, the component state member 'page' will be
               updated to 'start', 'products' or 'about'.
            3. Create 3 divs with classes 'start', 'products' and 'about' containing some dummy content
          
          <div className="header">
            <a style={{cursor: 'pointer'}} onClick={this.showPage.bind(this, 'start')}>Startpage</a>
            | <a style={{cursor: 'pointer'}} onClick={this.showPage.bind(this, 'products')}>Products</a>
            | <a style={{cursor: 'pointer'}} onClick={this.showPage.bind(this, 'about')}>About</a>
          </div>
          <div className="content">
            { this.state.page === 'start' ? <div className="startpage">Hi from startpage</div> : null }
            { this.state.page === 'products' ? <div className="products">Hi from products</div> : null }
            { this.state.page === 'about' ? <div className="about">Hi from about</div> : null }
          </div>
        */ }        
      </div>
    );
  }
}

export default App;

-- loops

import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';

class App extends Component {

  state = {
    fruits: ['Apple', 'Banana', 'Lemon', 'Kiwi', 'Pineapple']   
  }

  removeFruit = (fruit) => {
    const fruitIndex = this.state.fruits.findIndex((f) => {
      return fruit === f;
    });

    if(fruitIndex === -1) return;

    const fruits = [...this.state.fruits];
    fruits.splice(fruitIndex, 1);

    this.setState({
      fruits: fruits
    });
  }

  // task
  addFruit = (fruit) => {
    const fruits = [...this.state.fruits];

    fruits.push(fruit);
    this.setState({
      fruits: fruits
    });
  }

  render() {
    
    return (
      <div className="App">
        <h1>Loops 1</h1>
        <button onClick={this.removeFruit.bind(this, 'Apple')}>Remove Apple</button>
        {/*
          task:
          add a new button "Add Mango" that adds a 'Mango' to the fruits!
        */}
        <button onClick={this.addFruit.bind(this, 'Mango')}>Add Mango</button>
        <ul>
        {this.state.fruits.map((fruit) => {
          return <li>{fruit}</li>
        })}
        </ul>
      </div>
    );
  }
}

export default App;

-- fakeclass

// example of why we need to bind function calls in react components

class fakeReactClass {

    constructor() {
        this.halloworld = 'Hallo World';
    }

    sayHalloWorld() {
        console.log(this.halloworld);
    }

    sayHalloWorldArrow = (foo) => {
        console.log(this.halloworld);
    }

    render() {
        // return this.sayHalloWorld; // error
        return this.sayHalloWorld.bind(this);
    }
}

var hw = new fakeReactClass();
hw.render()();

-- databinding

import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';

class App extends Component {

  state = {
    sometext: '',
    username: '',
    password: '',
    loggedIn: -1 // task
  }

  // onChangeTextHandler = (event) => {
  //   this.setState({
  //     sometext: event.target.value
  //   });
  // }
  
  // onChangeUsernameHandler = (event) => {
  //   this.setState({
  //     username: event.target.value
  //   });
  // }
  
  // onChangePasswordHandler = (event) => {
  //   this.setState({
  //     password: event.target.value
  //   });
  // }

  onChange = e => this.setState({ [e.target.name] : e.target.value });
  
  // task
  login = () => {
    if(this.state.username === 'hallo' && this.state.password === 'world') {
      this.setState({
        loggedIn: 1
      });
    }
    else {
      this.setState({
        loggedIn: 0
      });      
    }
  }


  render() {

    /* 
      task: Create a button "login", that calls a function "login" and
      checks if the username is "hallo" and the password is "world". 
      If so, then display a div underneath the login button stating with
      green color that the login was successfull. Otherwise, state with
      red color, that the login failed.
    
    */

    return (
      <div className="App"> 
        <h1>Data Binding 1</h1>
          {/* <div>some text: <input onChange={this.onChangeTextHandler} type="text" /></div> */}
          <div>some text: <input name="sometext" onChange={this.onChange} type="text" /></div>          
          <div>you entered: {this.state.sometext}</div>
        <h1>Data Binding 2</h1>
          {/* <div>username: <input onChange={this.onChangeUsernameHandler} type="text" /></div> */}
          <div>username: <input name="username" onChange={this.onChange} type="text" /></div>          
          {/* <div>password: <input onChange={this.onChangePasswordHandler} type="text" /></div> */}
          <div>password: <input name="password" onChange={this.onChange}  type="text" /></div>          
          <button onClick={this.login}>Login</button>
          { this.state.loggedIn === 1 ? <div style={{ color: 'green' }}>Login Successful!</div> : null }
          { this.state.loggedIn === 0 ? <div style={{ color: 'red' }}>Login Failed!</div> : null }
      </div>
    );
  }
}

export default App;

-- loops2

import React, { Component } from 'react';
import logo from './logo.svg';
import randomstring from 'randomstring';
import './App.css';

class App extends Component {

  state = {
    fruits: [
      {id: 1, name: 'Apple'}, 
      {id: 2, name: 'Banana'}, 
      {id: 3, name: 'Lemon'}, 
      {id: 4, name: 'Kiwi'}, 
      {id: 5, name: 'Pineapple'}
    ],
    fruitName: ''
  }

  removeFruitById = (id) => {
    const fruitIndex = this.state.fruits.findIndex((f) => {
      return id === f.id;
    });

    if(fruitIndex === -1) return;

    const fruits = [...this.state.fruits];
    fruits.splice(fruitIndex, 1);

    this.setState({
      fruits: fruits
    });
  }

  removeFruitByName = (name) => {
    const fruitIndex = this.state.fruits.findIndex((f) => {
      return this.state.fruitName === f.name;
    });

    if(fruitIndex === -1) return;

    const fruits = [...this.state.fruits];
    fruits.splice(fruitIndex, 1);

    this.setState({
      fruits: fruits
    });
  }

  addFruit = (fruit) => {
    const fruits = [...this.state.fruits];

    fruits.push({
      name: this.state.fruitName,
      id: randomstring.generate(5)
    });

    this.setState({
      fruits: fruits
    });
  }    

  onChangeFruitHandler = (event) => {
    this.setState({
      fruitName: event.target.value
    });
  }

  render() {
    return (
      <div className="App">
        <h1>Loops & Data-Binding</h1>
        <input type="text" onChange={this.onChangeFruitHandler} />
        <button onClick={this.addFruit}>Add</button>
        <button onClick={this.removeFruitByName}>Remove</button>
        <ul>
        {this.state.fruits.map((fruit) => {
          // task, add a remove button
          return <li>{fruit.name} - <button onClick={this.removeFruitById.bind(this, fruit.id)}>Remove me</button></li>
        })}
        </ul>
      </div>
    );
  }
}

export default App;

-- Promises

import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';

class App extends Component {
  
  state = {
    numbers: [1],
    error: null
  }

  addNumber = () => {
    const numbers = [...this.state.numbers];
    numbers.push(numbers.length + 1);
    this.setState({
      numbers: numbers
    })
  }

  addSomeNumbersDelayedCallback = () => {
    setTimeout(() => {
      this.addNumber();
      setTimeout(() => {
        this.addNumber();
        setTimeout(() => {
          this.addNumber();
          setTimeout(() => {
            this.addNumber();
          }, 1000);          
        }, 1000);        
      }, 1000);      
    }, 1000);
  }  

  addSomeNumbersDelayedPromise = () => {
    this.addNumberDelayedPromise()
    .then(this.addNumberDelayedPromise)
    .then(this.addNumberDelayedPromise)
    .then(this.addNumberDelayedPromise)
    .catch((err) => {
      this.setState({
        error: 'Error happened!'
      })
    })          
  }

  addSomeNumbersDelayedAsyncAwait = async () => {
    try {
      await this.addNumberDelayedPromise();
      await this.addNumberDelayedPromise();
      await this.addNumberDelayedPromise();
      await this.addNumberDelayedPromise();
    }
    catch(err) {
      this.setState({
        error: 'Error happened!'
      })
    }
  }

  addNumberDelayedPromise = () => {
    return new Promise((resolve, reject) => {
      setTimeout( () => {
        this.addNumber();
        if(Math.random() > 0.5) {
          reject();
        }
        else {
          resolve();
        }
      }, 1000)
    });
  }

  clear = () => {
    this.setState({
      numbers: [1]
    })
  }

  render() {
    return (
      <div className="App">
          <div>
            <button onClick={this.addNumber}>Add Number</button>
            <button onClick={this.addSomeNumbersDelayedCallback}>Add Numbers CB</button>
            <button onClick={this.addSomeNumbersDelayedPromise}>Add Numbers P</button>            
            <button onClick={this.addSomeNumbersDelayedAsyncAwait}>Add Numbers AA</button>            
            <button onClick={this.clear}>Clear</button>
          </div>
          <div>
            {this.state.numbers.map( (n) => {
              return <h3>{n}</h3>;  
            })}
          </div>
          <div>
            <h1>{this.state.error}</h1>
          </div>
      </div>
    );
  }
}

export default App;

